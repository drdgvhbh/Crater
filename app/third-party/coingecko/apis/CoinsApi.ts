// tslint:disable
/**
 * CoinGecko API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import {
  BaseAPI,
  RequiredError,
  HttpHeaders,
  HttpQuery,
  COLLECTION_FORMATS,
} from '../runtime';

export interface CoinsIdContractContractAddressGetRequest {
  id: string;
  contractAddress: string;
}

export interface CoinsIdGetRequest {
  id: string;
  localization?: string;
  tickers?: boolean;
  marketData?: boolean;
  communityData?: boolean;
  developerData?: boolean;
  sparkline?: boolean;
}

export interface CoinsIdHistoryGetRequest {
  id: string;
  date: string;
  localization?: string;
}

export interface CoinsIdMarketChartGetRequest {
  id: string;
  vsCurrency: string;
  days: string;
}

export interface CoinsIdMarketChartRangeGetRequest {
  id: string;
  vsCurrency: string;
  from: string;
  to: string;
}

export interface CoinsIdStatusUpdatesGetRequest {
  id: string;
  perPage?: number;
  page?: number;
}

export interface CoinsIdTickersGetRequest {
  id: string;
  exchangeIds?: string;
  page?: number;
}

export interface CoinsMarketsGetRequest {
  vsCurrency: string;
  ids?: string;
  order?: string;
  perPage?: number;
  page?: number;
  sparkline?: boolean;
  priceChangePercentage?: string;
}

/**
 * no description
 */
export class CoinsApi extends BaseAPI {
  /**
   * Get coin info from contract address
   * Get coin info from contract address
   */
  coinsIdContractContractAddressGet(
    requestParameters: CoinsIdContractContractAddressGetRequest,
  ): Observable<void> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling coinsIdContractContractAddressGet.',
      );
    }

    if (
      requestParameters.contractAddress === null ||
      requestParameters.contractAddress === undefined
    ) {
      throw new RequiredError(
        'contractAddress',
        'Required parameter requestParameters.contractAddress was null or undefined when calling coinsIdContractContractAddressGet.',
      );
    }

    const queryParameters: HttpQuery = {};

    const headerParameters: HttpHeaders = {};

    return this.request<void>({
      path: `/coins/{id}/contract/{contract_address}`
        .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id)))
        .replace(
          `{${'contract_address'}}`,
          encodeURIComponent(String(requestParameters.contractAddress)),
        ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });
  }

  /**
   * Get current data (name, price, market, ... including exchange tickers) for a coin.<br><br>**IMPORTANT**: Ticker object is limited to 100 items, to get more tickers, use `/coins/{id}/tickers` Ticker `is_stale` is true when ticker that has not been updated/unchanged from the exchange for a while. Ticker `is_anomaly` is true if ticker\'s price is outliered by our system. You are responsible for managing how you want to display these information (e.g. footnote, different background, change opacity, hide)
   * Get current data (name, price, market, ... including exchange tickers) for a coin
   */
  coinsIdGet(requestParameters: CoinsIdGetRequest): Observable<void> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling coinsIdGet.',
      );
    }

    const queryParameters: HttpQuery = {};

    if (
      requestParameters.localization !== undefined &&
      requestParameters.localization !== null
    ) {
      queryParameters['localization'] = requestParameters.localization;
    }

    if (
      requestParameters.tickers !== undefined &&
      requestParameters.tickers !== null
    ) {
      queryParameters['tickers'] = requestParameters.tickers;
    }

    if (
      requestParameters.marketData !== undefined &&
      requestParameters.marketData !== null
    ) {
      queryParameters['market_data'] = requestParameters.marketData;
    }

    if (
      requestParameters.communityData !== undefined &&
      requestParameters.communityData !== null
    ) {
      queryParameters['community_data'] = requestParameters.communityData;
    }

    if (
      requestParameters.developerData !== undefined &&
      requestParameters.developerData !== null
    ) {
      queryParameters['developer_data'] = requestParameters.developerData;
    }

    if (
      requestParameters.sparkline !== undefined &&
      requestParameters.sparkline !== null
    ) {
      queryParameters['sparkline'] = requestParameters.sparkline;
    }

    const headerParameters: HttpHeaders = {};

    return this.request<void>({
      path: `/coins/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });
  }

  /**
   * Get historical data (name, price, market, stats) at a given date for a coin
   * Get historical data (name, price, market, stats) at a given date for a coin
   */
  coinsIdHistoryGet(
    requestParameters: CoinsIdHistoryGetRequest,
  ): Observable<void> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling coinsIdHistoryGet.',
      );
    }

    if (
      requestParameters.date === null ||
      requestParameters.date === undefined
    ) {
      throw new RequiredError(
        'date',
        'Required parameter requestParameters.date was null or undefined when calling coinsIdHistoryGet.',
      );
    }

    const queryParameters: HttpQuery = {};

    if (
      requestParameters.date !== undefined &&
      requestParameters.date !== null
    ) {
      queryParameters['date'] = requestParameters.date;
    }

    if (
      requestParameters.localization !== undefined &&
      requestParameters.localization !== null
    ) {
      queryParameters['localization'] = requestParameters.localization;
    }

    const headerParameters: HttpHeaders = {};

    return this.request<void>({
      path: `/coins/{id}/history`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });
  }

  /**
   * Get historical market data include price, market cap, and 24h volume (granularity auto)
   * Get historical market data include price, market cap, and 24h volume (granularity auto)
   */
  coinsIdMarketChartGet(
    requestParameters: CoinsIdMarketChartGetRequest,
  ): Observable<void> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling coinsIdMarketChartGet.',
      );
    }

    if (
      requestParameters.vsCurrency === null ||
      requestParameters.vsCurrency === undefined
    ) {
      throw new RequiredError(
        'vsCurrency',
        'Required parameter requestParameters.vsCurrency was null or undefined when calling coinsIdMarketChartGet.',
      );
    }

    if (
      requestParameters.days === null ||
      requestParameters.days === undefined
    ) {
      throw new RequiredError(
        'days',
        'Required parameter requestParameters.days was null or undefined when calling coinsIdMarketChartGet.',
      );
    }

    const queryParameters: HttpQuery = {};

    if (
      requestParameters.vsCurrency !== undefined &&
      requestParameters.vsCurrency !== null
    ) {
      queryParameters['vs_currency'] = requestParameters.vsCurrency;
    }

    if (
      requestParameters.days !== undefined &&
      requestParameters.days !== null
    ) {
      queryParameters['days'] = requestParameters.days;
    }

    const headerParameters: HttpHeaders = {};

    return this.request<void>({
      path: `/coins/{id}/market_chart`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });
  }

  /**
   * Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto)
   * Get historical market data include price, market cap, and 24h volume within a range of timestamp (granularity auto)
   */
  coinsIdMarketChartRangeGet(
    requestParameters: CoinsIdMarketChartRangeGetRequest,
  ): Observable<void> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling coinsIdMarketChartRangeGet.',
      );
    }

    if (
      requestParameters.vsCurrency === null ||
      requestParameters.vsCurrency === undefined
    ) {
      throw new RequiredError(
        'vsCurrency',
        'Required parameter requestParameters.vsCurrency was null or undefined when calling coinsIdMarketChartRangeGet.',
      );
    }

    if (
      requestParameters.from === null ||
      requestParameters.from === undefined
    ) {
      throw new RequiredError(
        'from',
        'Required parameter requestParameters.from was null or undefined when calling coinsIdMarketChartRangeGet.',
      );
    }

    if (requestParameters.to === null || requestParameters.to === undefined) {
      throw new RequiredError(
        'to',
        'Required parameter requestParameters.to was null or undefined when calling coinsIdMarketChartRangeGet.',
      );
    }

    const queryParameters: HttpQuery = {};

    if (
      requestParameters.vsCurrency !== undefined &&
      requestParameters.vsCurrency !== null
    ) {
      queryParameters['vs_currency'] = requestParameters.vsCurrency;
    }

    if (
      requestParameters.from !== undefined &&
      requestParameters.from !== null
    ) {
      queryParameters['from'] = requestParameters.from;
    }

    if (requestParameters.to !== undefined && requestParameters.to !== null) {
      queryParameters['to'] = requestParameters.to;
    }

    const headerParameters: HttpHeaders = {};

    return this.request<void>({
      path: `/coins/{id}/market_chart/range`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });
  }

  /**
   * Get status updates for a given coin
   * Get status updates for a given coin (beta)
   */
  coinsIdStatusUpdatesGet(
    requestParameters: CoinsIdStatusUpdatesGetRequest,
  ): Observable<void> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling coinsIdStatusUpdatesGet.',
      );
    }

    const queryParameters: HttpQuery = {};

    if (
      requestParameters.perPage !== undefined &&
      requestParameters.perPage !== null
    ) {
      queryParameters['per_page'] = requestParameters.perPage;
    }

    if (
      requestParameters.page !== undefined &&
      requestParameters.page !== null
    ) {
      queryParameters['page'] = requestParameters.page;
    }

    const headerParameters: HttpHeaders = {};

    return this.request<void>({
      path: `/coins/{id}/status_updates`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });
  }

  /**
   * Get coin tickers (paginated to 100 items)<br><br>**IMPORTANT**: Ticker `is_stale` is true when ticker that has not been updated/unchanged from the exchange for a while. Ticker `is_anomaly` is true if ticker\'s price is outliered by our system. You are responsible for managing how you want to display these information (e.g. footnote, different background, change opacity, hide)
   * Get coin tickers (paginated to 100 items)
   */
  coinsIdTickersGet(
    requestParameters: CoinsIdTickersGetRequest,
  ): Observable<void> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling coinsIdTickersGet.',
      );
    }

    const queryParameters: HttpQuery = {};

    if (
      requestParameters.exchangeIds !== undefined &&
      requestParameters.exchangeIds !== null
    ) {
      queryParameters['exchange_ids'] = requestParameters.exchangeIds;
    }

    if (
      requestParameters.page !== undefined &&
      requestParameters.page !== null
    ) {
      queryParameters['page'] = requestParameters.page;
    }

    const headerParameters: HttpHeaders = {};

    return this.request<void>({
      path: `/coins/{id}/tickers`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });
  }

  /**
   * Use this to obtain all the coins\' id in order to make API calls
   * List all supported coins id, name and symbol (no pagination required)
   */
  coinsListGet(): Observable<void> {
    const queryParameters: HttpQuery = {};

    const headerParameters: HttpHeaders = {};

    return this.request<void>({
      path: `/coins/list`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });
  }

  /**
   * Use this to obtain all the coins market data (price, market cap, volume)
   * List all supported coins price, market cap, volume, and market related data
   */
  coinsMarketsGet(requestParameters: CoinsMarketsGetRequest): Observable<void> {
    if (
      requestParameters.vsCurrency === null ||
      requestParameters.vsCurrency === undefined
    ) {
      throw new RequiredError(
        'vsCurrency',
        'Required parameter requestParameters.vsCurrency was null or undefined when calling coinsMarketsGet.',
      );
    }

    const queryParameters: HttpQuery = {};

    if (
      requestParameters.vsCurrency !== undefined &&
      requestParameters.vsCurrency !== null
    ) {
      queryParameters['vs_currency'] = requestParameters.vsCurrency;
    }

    if (requestParameters.ids !== undefined && requestParameters.ids !== null) {
      queryParameters['ids'] = requestParameters.ids;
    }

    if (
      requestParameters.order !== undefined &&
      requestParameters.order !== null
    ) {
      queryParameters['order'] = requestParameters.order;
    }

    if (
      requestParameters.perPage !== undefined &&
      requestParameters.perPage !== null
    ) {
      queryParameters['per_page'] = requestParameters.perPage;
    }

    if (
      requestParameters.page !== undefined &&
      requestParameters.page !== null
    ) {
      queryParameters['page'] = requestParameters.page;
    }

    if (
      requestParameters.sparkline !== undefined &&
      requestParameters.sparkline !== null
    ) {
      queryParameters['sparkline'] = requestParameters.sparkline;
    }

    if (
      requestParameters.priceChangePercentage !== undefined &&
      requestParameters.priceChangePercentage !== null
    ) {
      queryParameters['price_change_percentage'] =
        requestParameters.priceChangePercentage;
    }

    const headerParameters: HttpHeaders = {};

    return this.request<void>({
      path: `/coins/markets`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });
  }
}
