// tslint:disable
/**
 * CoinGecko API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import {
  BaseAPI,
  RequiredError,
  HttpHeaders,
  HttpQuery,
  COLLECTION_FORMATS,
} from '../runtime';

export interface EventsGetRequest {
  countryCode?: string;
  type?: string;
  page?: string;
  upcomingEventsOnly?: string;
  fromDate?: string;
  toDate?: string;
}

/**
 * no description
 */
export class EventsApi extends BaseAPI {
  /**
   * Get list of event countries
   * Get list of event countries
   */
  eventsCountriesGet(): Observable<void> {
    const queryParameters: HttpQuery = {};

    const headerParameters: HttpHeaders = {};

    return this.request<void>({
      path: `/events/countries`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });
  }

  /**
   * Get events, paginated by 100
   * Get events, paginated by 100
   */
  eventsGet(requestParameters: EventsGetRequest): Observable<void> {
    const queryParameters: HttpQuery = {};

    if (
      requestParameters.countryCode !== undefined &&
      requestParameters.countryCode !== null
    ) {
      queryParameters['country_code'] = requestParameters.countryCode;
    }

    if (
      requestParameters.type !== undefined &&
      requestParameters.type !== null
    ) {
      queryParameters['type'] = requestParameters.type;
    }

    if (
      requestParameters.page !== undefined &&
      requestParameters.page !== null
    ) {
      queryParameters['page'] = requestParameters.page;
    }

    if (
      requestParameters.upcomingEventsOnly !== undefined &&
      requestParameters.upcomingEventsOnly !== null
    ) {
      queryParameters['upcoming_events_only'] =
        requestParameters.upcomingEventsOnly;
    }

    if (
      requestParameters.fromDate !== undefined &&
      requestParameters.fromDate !== null
    ) {
      queryParameters['from_date'] = requestParameters.fromDate;
    }

    if (
      requestParameters.toDate !== undefined &&
      requestParameters.toDate !== null
    ) {
      queryParameters['to_date'] = requestParameters.toDate;
    }

    const headerParameters: HttpHeaders = {};

    return this.request<void>({
      path: `/events`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });
  }

  /**
   * Get list of event types
   * Get list of events types
   */
  eventsTypesGet(): Observable<void> {
    const queryParameters: HttpQuery = {};

    const headerParameters: HttpHeaders = {};

    return this.request<void>({
      path: `/events/types`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });
  }
}
